{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","descriptionBlock","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","ProfileAddNewPostForm","Field","component","name","validate","required","placeholder","MyPosts","React","memo","postsElements","posts","reverse","p","id","postsBlock","values","dispatch","reset","addPost","newPostText","MyPostsContainer","connect","state","profilePage","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","profileUpdateStatus","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.0e1ee86d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3kA1I\",\"contact\":\"ProfileInfo_contact__xKxUq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2see_\",\"posts\":\"MyPosts_posts__35FJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__208gI\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={ activateEditMode }>{props.status || '---'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} onBlur={ deactivateEditMode} autoFocus={true}\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {reduxForm} from \"redux-form\";\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>Save</button></div>\r\n        { error && <div className={styles.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <b>FullName</b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b>\r\n            {createField(\"\", \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills: </b>\r\n            {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b>\r\n            {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b> {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: </b> {createField(key, \"contacts.\" + key, [], Input)}\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assects/images/user.png\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    const onSubmit = formData => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} />\r\n                <div>\r\n                    { isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} /> }\r\n                </div>\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData profile={profile} isOwner={isOwner}\r\n                                   goToEditMode={() => {setEditMode(true)}} /> }\r\n                <ProfileStatusWithHooks  status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode} >Edit</button></div>}\r\n        <div>\r\n            <b>FullName</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills: </b> {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me: </b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b> {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}: </b>{contactValue}</div>\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from'./Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' />\r\n                {props.message}\r\n            <div>\r\n                <span>like</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from'./MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} placeholder={'Post message'} />\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst ProfileAddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map( p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let onAddPost = (values, dispatch) => {\r\n        dispatch(reset('postMessage'))\r\n        props.addPost(values.newPostText);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <ProfileAddNewPostForm onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    ) \r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mstp = state => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mdtp = dispatch => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch( addPostActionCreator(newPostText) );\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mstp, mdtp)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     savePhoto={this.props.savePhoto}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n    profile: state.profilePage.profile,\r\n    profileUpdateStatus: state.profilePage.profileUpdateStatus,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}